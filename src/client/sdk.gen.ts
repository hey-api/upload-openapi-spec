// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer
} from '@hey-api/client-fetch'
import type {
  PostV1SpecificationsData,
  PostV1SpecificationsResponse,
  PostV1SpecificationsError
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const postV1Specifications = <ThrowOnError extends boolean = false>(
  options: Options<PostV1SpecificationsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostV1SpecificationsResponse,
    PostV1SpecificationsError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/v1/specifications',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers
    }
  })
}
